// Code generated from yamlpath.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type yamlpathLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var YamlpathLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func yamlpathlexerLexerInit() {
	staticData := &YamlpathLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'$'", "'@'", "'..'", "'.'", "'['", "']'", "','", "'*'", "':'",
		"'?'", "'('", "')'", "'+'", "'-'", "'/'", "'<='", "'<'", "'>'", "'>='",
		"'=='", "'!='", "'=~'", "'in'", "'nin'", "'subsetof'", "'&&'", "'and'",
		"'||'", "'or'", "'!'", "'not'", "'true'", "'false'", "'null'", "'i'",
		"'m'", "'s'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "IDENTIFIER", "NUMBER", "STRING", "REGEX", "WS", "COMMENT",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16",
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24",
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32",
		"T__33", "T__34", "T__35", "T__36", "IDENTIFIER", "NUMBER", "STRING",
		"REGEX", "WS", "COMMENT", "ESC", "UNICODE", "HEX",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 43, 285, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 1, 0, 1, 0,
		1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6,
		1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1,
		12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16,
		1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1,
		20, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23,
		1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1,
		25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28,
		1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1,
		31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33,
		1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1, 37, 1, 37, 5,
		37, 203, 8, 37, 10, 37, 12, 37, 206, 9, 37, 1, 38, 3, 38, 209, 8, 38, 1,
		38, 4, 38, 212, 8, 38, 11, 38, 12, 38, 213, 1, 38, 1, 38, 4, 38, 218, 8,
		38, 11, 38, 12, 38, 219, 3, 38, 222, 8, 38, 1, 38, 1, 38, 3, 38, 226, 8,
		38, 1, 38, 4, 38, 229, 8, 38, 11, 38, 12, 38, 230, 3, 38, 233, 8, 38, 1,
		39, 1, 39, 1, 39, 5, 39, 238, 8, 39, 10, 39, 12, 39, 241, 9, 39, 1, 39,
		1, 39, 1, 40, 1, 40, 1, 40, 5, 40, 248, 8, 40, 10, 40, 12, 40, 251, 9,
		40, 1, 40, 1, 40, 1, 41, 4, 41, 256, 8, 41, 11, 41, 12, 41, 257, 1, 41,
		1, 41, 1, 42, 1, 42, 1, 42, 1, 42, 5, 42, 266, 8, 42, 10, 42, 12, 42, 269,
		9, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 3, 43, 276, 8, 43, 1, 44, 1,
		44, 1, 44, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 2, 239, 249, 0, 46, 1, 1,
		3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23,
		12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41,
		21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59,
		30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77,
		39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 0, 89, 0, 91, 0, 1, 0, 9, 3, 0,
		65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 1, 0, 48,
		57, 2, 0, 69, 69, 101, 101, 2, 0, 43, 43, 45, 45, 3, 0, 9, 10, 13, 13,
		32, 32, 2, 0, 10, 10, 13, 13, 8, 0, 39, 39, 47, 47, 92, 92, 96, 96, 102,
		102, 110, 110, 114, 114, 116, 116, 3, 0, 48, 57, 65, 70, 97, 102, 296,
		0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0,
		0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0,
		0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0,
		0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1,
		0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39,
		1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0,
		47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0,
		0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0,
		0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0,
		0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1,
		0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85,
		1, 0, 0, 0, 1, 93, 1, 0, 0, 0, 3, 95, 1, 0, 0, 0, 5, 97, 1, 0, 0, 0, 7,
		100, 1, 0, 0, 0, 9, 102, 1, 0, 0, 0, 11, 104, 1, 0, 0, 0, 13, 106, 1, 0,
		0, 0, 15, 108, 1, 0, 0, 0, 17, 110, 1, 0, 0, 0, 19, 112, 1, 0, 0, 0, 21,
		114, 1, 0, 0, 0, 23, 116, 1, 0, 0, 0, 25, 118, 1, 0, 0, 0, 27, 120, 1,
		0, 0, 0, 29, 122, 1, 0, 0, 0, 31, 124, 1, 0, 0, 0, 33, 127, 1, 0, 0, 0,
		35, 129, 1, 0, 0, 0, 37, 131, 1, 0, 0, 0, 39, 134, 1, 0, 0, 0, 41, 137,
		1, 0, 0, 0, 43, 140, 1, 0, 0, 0, 45, 143, 1, 0, 0, 0, 47, 146, 1, 0, 0,
		0, 49, 150, 1, 0, 0, 0, 51, 159, 1, 0, 0, 0, 53, 162, 1, 0, 0, 0, 55, 166,
		1, 0, 0, 0, 57, 169, 1, 0, 0, 0, 59, 172, 1, 0, 0, 0, 61, 174, 1, 0, 0,
		0, 63, 178, 1, 0, 0, 0, 65, 183, 1, 0, 0, 0, 67, 189, 1, 0, 0, 0, 69, 194,
		1, 0, 0, 0, 71, 196, 1, 0, 0, 0, 73, 198, 1, 0, 0, 0, 75, 200, 1, 0, 0,
		0, 77, 208, 1, 0, 0, 0, 79, 234, 1, 0, 0, 0, 81, 244, 1, 0, 0, 0, 83, 255,
		1, 0, 0, 0, 85, 261, 1, 0, 0, 0, 87, 272, 1, 0, 0, 0, 89, 277, 1, 0, 0,
		0, 91, 283, 1, 0, 0, 0, 93, 94, 5, 36, 0, 0, 94, 2, 1, 0, 0, 0, 95, 96,
		5, 64, 0, 0, 96, 4, 1, 0, 0, 0, 97, 98, 5, 46, 0, 0, 98, 99, 5, 46, 0,
		0, 99, 6, 1, 0, 0, 0, 100, 101, 5, 46, 0, 0, 101, 8, 1, 0, 0, 0, 102, 103,
		5, 91, 0, 0, 103, 10, 1, 0, 0, 0, 104, 105, 5, 93, 0, 0, 105, 12, 1, 0,
		0, 0, 106, 107, 5, 44, 0, 0, 107, 14, 1, 0, 0, 0, 108, 109, 5, 42, 0, 0,
		109, 16, 1, 0, 0, 0, 110, 111, 5, 58, 0, 0, 111, 18, 1, 0, 0, 0, 112, 113,
		5, 63, 0, 0, 113, 20, 1, 0, 0, 0, 114, 115, 5, 40, 0, 0, 115, 22, 1, 0,
		0, 0, 116, 117, 5, 41, 0, 0, 117, 24, 1, 0, 0, 0, 118, 119, 5, 43, 0, 0,
		119, 26, 1, 0, 0, 0, 120, 121, 5, 45, 0, 0, 121, 28, 1, 0, 0, 0, 122, 123,
		5, 47, 0, 0, 123, 30, 1, 0, 0, 0, 124, 125, 5, 60, 0, 0, 125, 126, 5, 61,
		0, 0, 126, 32, 1, 0, 0, 0, 127, 128, 5, 60, 0, 0, 128, 34, 1, 0, 0, 0,
		129, 130, 5, 62, 0, 0, 130, 36, 1, 0, 0, 0, 131, 132, 5, 62, 0, 0, 132,
		133, 5, 61, 0, 0, 133, 38, 1, 0, 0, 0, 134, 135, 5, 61, 0, 0, 135, 136,
		5, 61, 0, 0, 136, 40, 1, 0, 0, 0, 137, 138, 5, 33, 0, 0, 138, 139, 5, 61,
		0, 0, 139, 42, 1, 0, 0, 0, 140, 141, 5, 61, 0, 0, 141, 142, 5, 126, 0,
		0, 142, 44, 1, 0, 0, 0, 143, 144, 5, 105, 0, 0, 144, 145, 5, 110, 0, 0,
		145, 46, 1, 0, 0, 0, 146, 147, 5, 110, 0, 0, 147, 148, 5, 105, 0, 0, 148,
		149, 5, 110, 0, 0, 149, 48, 1, 0, 0, 0, 150, 151, 5, 115, 0, 0, 151, 152,
		5, 117, 0, 0, 152, 153, 5, 98, 0, 0, 153, 154, 5, 115, 0, 0, 154, 155,
		5, 101, 0, 0, 155, 156, 5, 116, 0, 0, 156, 157, 5, 111, 0, 0, 157, 158,
		5, 102, 0, 0, 158, 50, 1, 0, 0, 0, 159, 160, 5, 38, 0, 0, 160, 161, 5,
		38, 0, 0, 161, 52, 1, 0, 0, 0, 162, 163, 5, 97, 0, 0, 163, 164, 5, 110,
		0, 0, 164, 165, 5, 100, 0, 0, 165, 54, 1, 0, 0, 0, 166, 167, 5, 124, 0,
		0, 167, 168, 5, 124, 0, 0, 168, 56, 1, 0, 0, 0, 169, 170, 5, 111, 0, 0,
		170, 171, 5, 114, 0, 0, 171, 58, 1, 0, 0, 0, 172, 173, 5, 33, 0, 0, 173,
		60, 1, 0, 0, 0, 174, 175, 5, 110, 0, 0, 175, 176, 5, 111, 0, 0, 176, 177,
		5, 116, 0, 0, 177, 62, 1, 0, 0, 0, 178, 179, 5, 116, 0, 0, 179, 180, 5,
		114, 0, 0, 180, 181, 5, 117, 0, 0, 181, 182, 5, 101, 0, 0, 182, 64, 1,
		0, 0, 0, 183, 184, 5, 102, 0, 0, 184, 185, 5, 97, 0, 0, 185, 186, 5, 108,
		0, 0, 186, 187, 5, 115, 0, 0, 187, 188, 5, 101, 0, 0, 188, 66, 1, 0, 0,
		0, 189, 190, 5, 110, 0, 0, 190, 191, 5, 117, 0, 0, 191, 192, 5, 108, 0,
		0, 192, 193, 5, 108, 0, 0, 193, 68, 1, 0, 0, 0, 194, 195, 5, 105, 0, 0,
		195, 70, 1, 0, 0, 0, 196, 197, 5, 109, 0, 0, 197, 72, 1, 0, 0, 0, 198,
		199, 5, 115, 0, 0, 199, 74, 1, 0, 0, 0, 200, 204, 7, 0, 0, 0, 201, 203,
		7, 1, 0, 0, 202, 201, 1, 0, 0, 0, 203, 206, 1, 0, 0, 0, 204, 202, 1, 0,
		0, 0, 204, 205, 1, 0, 0, 0, 205, 76, 1, 0, 0, 0, 206, 204, 1, 0, 0, 0,
		207, 209, 5, 45, 0, 0, 208, 207, 1, 0, 0, 0, 208, 209, 1, 0, 0, 0, 209,
		211, 1, 0, 0, 0, 210, 212, 7, 2, 0, 0, 211, 210, 1, 0, 0, 0, 212, 213,
		1, 0, 0, 0, 213, 211, 1, 0, 0, 0, 213, 214, 1, 0, 0, 0, 214, 221, 1, 0,
		0, 0, 215, 217, 5, 46, 0, 0, 216, 218, 7, 2, 0, 0, 217, 216, 1, 0, 0, 0,
		218, 219, 1, 0, 0, 0, 219, 217, 1, 0, 0, 0, 219, 220, 1, 0, 0, 0, 220,
		222, 1, 0, 0, 0, 221, 215, 1, 0, 0, 0, 221, 222, 1, 0, 0, 0, 222, 232,
		1, 0, 0, 0, 223, 225, 7, 3, 0, 0, 224, 226, 7, 4, 0, 0, 225, 224, 1, 0,
		0, 0, 225, 226, 1, 0, 0, 0, 226, 228, 1, 0, 0, 0, 227, 229, 7, 2, 0, 0,
		228, 227, 1, 0, 0, 0, 229, 230, 1, 0, 0, 0, 230, 228, 1, 0, 0, 0, 230,
		231, 1, 0, 0, 0, 231, 233, 1, 0, 0, 0, 232, 223, 1, 0, 0, 0, 232, 233,
		1, 0, 0, 0, 233, 78, 1, 0, 0, 0, 234, 239, 5, 34, 0, 0, 235, 238, 3, 87,
		43, 0, 236, 238, 9, 0, 0, 0, 237, 235, 1, 0, 0, 0, 237, 236, 1, 0, 0, 0,
		238, 241, 1, 0, 0, 0, 239, 240, 1, 0, 0, 0, 239, 237, 1, 0, 0, 0, 240,
		242, 1, 0, 0, 0, 241, 239, 1, 0, 0, 0, 242, 243, 5, 34, 0, 0, 243, 80,
		1, 0, 0, 0, 244, 249, 5, 47, 0, 0, 245, 248, 3, 87, 43, 0, 246, 248, 9,
		0, 0, 0, 247, 245, 1, 0, 0, 0, 247, 246, 1, 0, 0, 0, 248, 251, 1, 0, 0,
		0, 249, 250, 1, 0, 0, 0, 249, 247, 1, 0, 0, 0, 250, 252, 1, 0, 0, 0, 251,
		249, 1, 0, 0, 0, 252, 253, 5, 47, 0, 0, 253, 82, 1, 0, 0, 0, 254, 256,
		7, 5, 0, 0, 255, 254, 1, 0, 0, 0, 256, 257, 1, 0, 0, 0, 257, 255, 1, 0,
		0, 0, 257, 258, 1, 0, 0, 0, 258, 259, 1, 0, 0, 0, 259, 260, 6, 41, 0, 0,
		260, 84, 1, 0, 0, 0, 261, 262, 5, 47, 0, 0, 262, 263, 5, 47, 0, 0, 263,
		267, 1, 0, 0, 0, 264, 266, 8, 6, 0, 0, 265, 264, 1, 0, 0, 0, 266, 269,
		1, 0, 0, 0, 267, 265, 1, 0, 0, 0, 267, 268, 1, 0, 0, 0, 268, 270, 1, 0,
		0, 0, 269, 267, 1, 0, 0, 0, 270, 271, 6, 42, 0, 0, 271, 86, 1, 0, 0, 0,
		272, 275, 5, 92, 0, 0, 273, 276, 7, 7, 0, 0, 274, 276, 3, 89, 44, 0, 275,
		273, 1, 0, 0, 0, 275, 274, 1, 0, 0, 0, 276, 88, 1, 0, 0, 0, 277, 278, 5,
		117, 0, 0, 278, 279, 3, 91, 45, 0, 279, 280, 3, 91, 45, 0, 280, 281, 3,
		91, 45, 0, 281, 282, 3, 91, 45, 0, 282, 90, 1, 0, 0, 0, 283, 284, 7, 8,
		0, 0, 284, 92, 1, 0, 0, 0, 16, 0, 204, 208, 213, 219, 221, 225, 230, 232,
		237, 239, 247, 249, 257, 267, 275, 1, 0, 1, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// yamlpathLexerInit initializes any static state used to implement yamlpathLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewyamlpathLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func YamlpathLexerInit() {
	staticData := &YamlpathLexerLexerStaticData
	staticData.once.Do(yamlpathlexerLexerInit)
}

// NewyamlpathLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewyamlpathLexer(input antlr.CharStream) *yamlpathLexer {
	YamlpathLexerInit()
	l := new(yamlpathLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &YamlpathLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "yamlpath.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// yamlpathLexer tokens.
const (
	yamlpathLexerT__0       = 1
	yamlpathLexerT__1       = 2
	yamlpathLexerT__2       = 3
	yamlpathLexerT__3       = 4
	yamlpathLexerT__4       = 5
	yamlpathLexerT__5       = 6
	yamlpathLexerT__6       = 7
	yamlpathLexerT__7       = 8
	yamlpathLexerT__8       = 9
	yamlpathLexerT__9       = 10
	yamlpathLexerT__10      = 11
	yamlpathLexerT__11      = 12
	yamlpathLexerT__12      = 13
	yamlpathLexerT__13      = 14
	yamlpathLexerT__14      = 15
	yamlpathLexerT__15      = 16
	yamlpathLexerT__16      = 17
	yamlpathLexerT__17      = 18
	yamlpathLexerT__18      = 19
	yamlpathLexerT__19      = 20
	yamlpathLexerT__20      = 21
	yamlpathLexerT__21      = 22
	yamlpathLexerT__22      = 23
	yamlpathLexerT__23      = 24
	yamlpathLexerT__24      = 25
	yamlpathLexerT__25      = 26
	yamlpathLexerT__26      = 27
	yamlpathLexerT__27      = 28
	yamlpathLexerT__28      = 29
	yamlpathLexerT__29      = 30
	yamlpathLexerT__30      = 31
	yamlpathLexerT__31      = 32
	yamlpathLexerT__32      = 33
	yamlpathLexerT__33      = 34
	yamlpathLexerT__34      = 35
	yamlpathLexerT__35      = 36
	yamlpathLexerT__36      = 37
	yamlpathLexerIDENTIFIER = 38
	yamlpathLexerNUMBER     = 39
	yamlpathLexerSTRING     = 40
	yamlpathLexerREGEX      = 41
	yamlpathLexerWS         = 42
	yamlpathLexerCOMMENT    = 43
)
